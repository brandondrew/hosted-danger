shared:
  settings:
    mym:
      rooms:
        - HostedDanger通知
      statuses:
        - FAILURE
      emoji: true

jobs:

  pr:
    image: cd.docker-registry.corp.yahoo.co.jp:4443/hosted-danger/sd-image:latest
    requires: [~pr]
    steps:
      - format: |
          crystal tool format --check &> /dev/null
          ret_code=$?

          if [ 0 -ne $ret_code ]; then
              echo 'Please formatting the codes. ('$ret_code')'
              exit $ret_code
          else
              echo 'Success!'
          fi
      - build: |
          shards build
      - test: |
          crystal spec --junit_output=$SD_ARTIFACTS_DIR/reports/test

  build-image:
    template: docker/build@stable
    environment:
      REPO_NAME: hosted-danger
      IMAGE_NAME: hosted-danger-image
    requires: [~pr]
    steps:
      - prebuild_image: |
          sed -i -e s@"ADD envs.json /tmp/hd/envs.json"@""@g Dockerfile
          cat Dockerfile

  commit:
    image: cd.docker-registry.corp.yahoo.co.jp:4443/hosted-danger/sd-image:latest
    requires: [~commit]
    steps:
      - build: |
          shards build
      - test: |
          crystal spec --junit_output=$SD_ARTIFACTS_DIR/reports/test

  publish-image:
    template: docker/publish@stable
    environment:
      REPO_NAME: hosted-danger
      IMAGE_NAME: hosted-danger-image
    requires: [commit]
    steps:
      - prebuild_image: |
          sed -i -e s@"ADD envs.json /tmp/hd/envs.json"@""@g Dockerfile
          cat Dockerfile

  deployment:
    image: cd.docker-registry.corp.yahoo.co.jp:4443/hosted-danger/sd-image:latest
    requires: [publish-image]
    steps:
      - confirmation: |
          echo "Deploying image: "
          echo `meta get fixed_docker_image`
      - ready: |
          git clone https://ghe.corp.yahoo.co.jp/hosted-danger/ops
          git clone https://ghe.corp.yahoo.co.jp/hosted-danger/tools
      - deployment: |
          echo "Start deployment"

          sed -e "s@IMAGE@"`meta get fixed_docker_image`"@g" ops/kube/deployment.yaml.tmpl > deployment.yaml

          sed -e "s@ACCESS_TOKEN_GHE@"`echo -n $ACCESS_TOKEN_GHE | base64`"@g" ops/kube/secrets.yaml.tmpl | \
            sed -e "s@ACCESS_TOKEN_PARTNER@"`echo -n $ACCESS_TOKEN_PARTNER | base64`"@g" | \
            sed -e "s@ACCESS_TOKEN_GIT@"`echo -n $ACCESS_TOKEN_GIT | base64`"@g" | \
            sed -e "s@DRAGON_ACCESS_KEY@"`echo -n $DRAGON_ACCESS_KEY | base64`"@g" | \
            sed -e "s@DRAGON_SECRET_ACCESS_KEY@"`echo -n $DRAGON_SECRET_ACCESS_KEY | base64`"@g" | \
            sed -e "s@SD_USER_TOKEN_CD@"`echo -n $SD_USER_TOKEN_CD | base64`"@g" | \
            sed -e "s@SD_USER_TOKEN_NEXT@"`echo -n $SD_USER_TOKEN_NEXT | base64`"@g" > secrets.yaml

          curl -H "Authorization: token $ACCESS_TOKEN_GHE" https://raw.ghe.corp.yahoo.co.jp/hosted-danger/secrets/master/config > config

          #
          # Kubernetes
          #
          kubectl delete secret secret-envs --kubeconfig config --namespace=default || true
          kubectl apply -f secrets.yaml --kubeconfig config --namespace=default
          kubectl apply -f ops/kube/configmap.yaml --kubeconfig config --namespace=default
          kubectl apply -f deployment.yaml --kubeconfig config --namespace=default
          kubectl apply -f ops/kube/service.yaml --kubeconfig config --namespace=default
          kubectl apply -f ops/kube/admin-user-role.yaml --kubeconfig config --namespace=default
          kubectl apply -f ops/kube/admin-user.yaml --kubeconfig config --namespace=kube-system

          tools/wait_for_the_deployment
    secrets:
      - ACCESS_TOKEN_GHE
      - ACCESS_TOKEN_PARTNER
      - ACCESS_TOKEN_GIT
      - DRAGON_ACCESS_KEY
      - DRAGON_SECRET_ACCESS_KEY
      - SD_USER_TOKEN_CD
      - SD_USER_TOKEN_NEXT
  acceptance-test:
    image: cd.docker-registry.corp.yahoo.co.jp:4443/hosted-danger/sd-image:latest
    requires: [deployment]
    steps:
      - ready: |
          git clone https://ghe.corp.yahoo.co.jp/hosted-danger/tools
      - tests: |
          ./tools/acceptance-tests
