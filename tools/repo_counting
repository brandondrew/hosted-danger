#!/usr/bin/env ruby

require 'net/http'
require 'json'
require 'date'
require 'uri'

if ARGV.size < 3
  help_message = <<-HELP

ap-dangerのリポジトリの登録数を取得するスクリプトです

```
$ tools/repo_counting [ghe.corpのaccess token] [git.corpのaccess token] [partner.git.corpのaccess token] [MYM Token(Optional)]
```
HELP

  puts help_message
  exit 0
end

def header(host)
  case host
  when "ghe.corp.yahoo.co.jp"
    "-H \"Authorization: token #{ARGV[0]}\""
  when "git.corp.yahoo.co.jp"
    "-H \"Authorization: token #{ARGV[1]}\""
  when "partner.git.corp.yahoo.co.jp"
    "-H \"Authorization: token #{ARGV[2]}\""
  end
end

def repos(host)
  repos_urls = JSON.parse(`curl #{header(host)} --silent https://#{host}/api/v3/user/orgs`).map { |j| j["repos_url"].to_s }

  jsons = []
  jsons << JSON.parse(`curl #{header(host)} --silent https://#{host}/api/v3/users/ap-danger/repos?type=all`)
  jsons << JSON.parse(`curl #{header(host)} --silent https://#{host}/api/v3/user/repos`)

  repos_urls.each do |repos_url|
    jsons << JSON.parse(`curl #{header(host)} --silent #{repos_url}`)
  end

  jsons.map { |json| json.map { |j| j["html_url"].to_s } }.flatten.uniq.reject { |repo| member_repo?(repo) }
end

def get_all_repos
  ghe = repos("ghe.corp.yahoo.co.jp")
  git = repos("git.corp.yahoo.co.jp")
  partner = repos("partner.git.corp.yahoo.co.jp")

  { ghe: ghe, git: git, partner: partner }
end

def member_repo?(repo)
  members = ["tahori", "kasonoda", "taicsuzu", "atyamash", "gelee", "ap-approduce", "ap-danger", "approduce", "hosted-danger"]
  members.each do |member|
    return true if repo.include?(member)
  end

  false
end

def print_result(all_repos)
  ghe = all_repos[:ghe]
  git = all_repos[:git]
  partner = all_repos[:partner]

  puts <<-MSG
Hosted Danger利用リポジトリを集計します (メンバーのリポジトリは含まれません)

------- ghe -------
リポジトリ数: #{ghe.size}

#{ghe.join("\n")}

------- git -------
リポジトリ数: #{git.size}

#{git.join("\n")}

------- partner -------
リポジトリ数: #{partner.size}

#{partner.join("\n")}

-------------------
合計: #{ghe.size + git.size + partner.size}

MSG
end

def post_to_mym?
  ARGV.size == 4
end

def post_to_mym(message)
  url = 'https://mym.corp.yahoo.co.jp/api/post'
  uri = URI.parse(url)

  https = Net::HTTP.new(uri.host, uri.port)
  https.use_ssl = true

  req = Net::HTTP::Post.new(uri.path)
  req['Content-Type'] = 'application/json'
  payload = {
    token: ARGV[3],
    message: message,
  }.to_json

  req.body = payload

  https.request(req)
end

def post_to_mym_for_all_repos(all_repos)
  ghe = all_repos[:ghe]
  git = all_repos[:git]
  partner = all_repos[:partner]

  date = DateTime.now.strftime("%Y/%m/%d")

  details_ghe = (ghe - current_repos["ghe"]).map{ |repo| repo + " :new:" }.join("\n")
  details_ghe = details_ghe.empty? ? "新規導入はありませんでした :hand:" : details_ghe

  details_git = (git - current_repos["git"]).map{ |repo| repo + " :new:" }.join("\n")
  details_git = details_git.empty? ? "新規導入はありませんでした :hand:" : details_git

  details_partner = (partner - current_repos["partner"]).map{ |repo| repo + " :new:" }.join("\n")
  details_partner = details_partner.empty? ? "新規導入はありませんでした :hand:" : details_partner

  raw_message = <<-MSG
:rocket: #{date} の利用状況をリポートします!! :rocket:

[ ghe.corp.yahoo.co.jp ]
導入リポジトリ数: **#{ghe.size}**
#{details_ghe}

[ git.corp.yahoo.co.jp ]
導入リポジトリ数: **#{git.size}**
#{details_git}

[ partner.git.corp.yahoo.co.jp ]
導入リポジトリ数: **#{partner.size}**
#{details_partner}
MSG

  group_message = raw_message.lines.group_by.with_index do |line, idx|
    idx / 30
  end

  puts group_message

  group_message.each do |_, m|
    puts m.join("")
    post_to_mym(m.join(""))

    sleep 2
  end

  save_repos(all_repos)
end

def repos_json_path
  File.expand_path('../../repos.json', __FILE__)
end

def current_repos
  return { "ghe" => [], "git" => [], "partner" => [] } unless File.exist?(repos_json_path)

  JSON.parse(File.read(repos_json_path))
end

def save_repos(all_repos)
  File.write(repos_json_path, all_repos.to_json)
end

all_repos = get_all_repos

print_result(all_repos)
post_to_mym_for_all_repos(all_repos) if post_to_mym?
